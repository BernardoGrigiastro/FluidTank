import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.4.0'
    }
}

plugins {
    id("maven-publish")
    id "com.github.breadmoirai.github-release" version "2.2.12"
}
apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "com.github.breadmoirai.github-release"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = getProperty("modVersion")
if (Boolean.valueOf(System.getenv("GITHUB_ACTIONS"))) {
    // In remote CI/CD environment
    version = (getProperty("modVersion") + "_" + System.getenv("GITHUB_SHA").substring(0, 7))
}

group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LargeFluidTank"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileScala.sourceCompatibility = compileScala.targetCompatibility = '1.8'

static String mappingVersion() { return '20200723-1.16.1' }

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: mappingVersion()
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                fluidtank {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                fluidtank {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            forceExit false

            if (Boolean.valueOf(System.getenv("GITHUB_ACTIONS")))
                args '--mod', "fluidtank", '--dev'
            else
                args '--mod', "fluidtank", '--all'

            mods {
                fluidtank {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
//    maven {
//        name "BuildCraft"
//        url = "https://mod-buildcraft.com/maven"
//    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        content {
            includeGroup("mezz.jei")
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "modmaven.k-4u.nl"
        url = "https://modmaven.k-4u.nl"
    }
    if (!Boolean.valueOf(System.getenv("GITHUB_ACTIONS"))) {
        maven {
            name = "Hwyla"
            url "https://maven.tehnut.info"
            content {
                includeModule("mcp.mobius.waila", "Hwyla")
            }
        }
    }
    maven { // The One Probe
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    if (hasGitHubToken()) {
        maven {
            name = "GitHubPackages-SLP"
            url = uri("https://maven.pkg.github.com/Kotori316/SLP")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
            content {
                includeModule("com.kotori316", "ScalableCatsForce")
            }
        }
    } else {
        maven {
            // Curse Forge
            name 'Curse Forge'
            url 'https://minecraft.curseforge.com/api/maven/'
            content {
                includeModule("scalable-cats-force", "ScalableCatsForce-2.13.3-build")
            }
        }
    }
    repositories.stream().filter { it instanceof MavenArtifactRepository }.forEach { repo ->
        repo.content {
            excludeVersionByRegex(".*", ".*", ".*_mapped_snapshot_.*")
        }
    }
}

private boolean hasGitHubToken() {
    return project.hasProperty("githubToken") || System.getenv("REPO_TOKEN") != null
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The user-dev artifact is a special name and will get all sorts of transformations applied to it.
    def forge_prop = loadProperties("forge_version.properties")
    minecraft(forge_prop.getProperty("forge_version"))
    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.13.3'
    implementation group: 'org.typelevel', name: "cats-core_2.13", version: '2.2.0'

    if (!Boolean.valueOf(System.getenv("GITHUB_ACTIONS"))) {
        implementation fg.deobf("mcp.mobius.waila:Hwyla:1.10.11-B78_1.16.2")
    }
    implementation fg.deobf("mezz.jei:jei-1.16.2:7.1.3.19")
    implementation fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.0.2-beta-5")
    compileOnly fg.deobf("appeng:appliedenergistics2:8.0.0-beta.1")

    if (hasGitHubToken()) {
        implementation("com.kotori316:ScalableCatsForce:2.13.3-build-3:dev")
    } else {
        implementation("scalable-cats-force:ScalableCatsForce-2.13.3-build:3:dev")
    }
    // Test Dependencies.
    implementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2')
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2')
    implementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

def loadProperties(String filename) {
    def props = new Properties()
    file(filename).withInputStream {
        props.load(it)
    }
    return props
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

test {
    useJUnitPlatform()
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '291006'
        changelogType = 'markdown'
        changelog = getAllChangeLog()
        releaseType = 'release'
        addGameVersion '1.16.3'
        mainArtifact jar
        addArtifact deobfJar
        addArtifact srcJar
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('FluidTank')
    token = project.hasProperty("githubToken") ? getProperty("githubToken") : ""
    targetCommitish.set('1.16')
    body.set(getLatestChangeLog())
    releaseAssets = files(
            jar.getArchiveFile().get(),
            deobfJar.getArchiveFile().get(),
            srcJar.getArchiveFile().get()
    )
}

task signJar2() {
    doLast {
        ant.signjar(
                jar: jar.getArchiveFile().get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
        ant.signjar(
                jar: deobfJar.getArchiveFile().get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
    onlyIf {
        project.hasProperty('keyStoreAlias') &&
                project.hasProperty('keyStore') &&
                project.hasProperty('keyStorePass')
    }
}

if (!Boolean.valueOf(System.getenv("GITHUB_ACTIONS"))) {
    // Runs this task automatically when build is ran.
    assemble.dependsOn(signJar2)
} else {
    // In CI
    tasks.withType(JavaExec) {
        // Avoid error of GL
        systemProperty("fml.earlyprogresswindow", false)
    }
    // Remove HWYLA class.
    sourceSets {
        main {
            scala {
                srcDir 'src/main/scala'
                exclude "/com/kotori316/fluidtank/integration/hwyla/**"
            }
        }
    }
}

void moveOldLog() {
    def new_log_file = file("changes.md")
    def old_log_file = file("old_logs.md")

    if (new_log_file.exists()) {
        if (!old_log_file.exists())
            old_log_file.createNewFile()
        def combined = new_log_file.text +
                System.lineSeparator() +
                "Build with ${loadProperties("forge_version.properties").getProperty("forge_version")}, Mapping: ${mappingVersion()}" +
                System.lineSeparator() * 2 +
                old_log_file.text
        old_log_file.setText(combined)
    }
}

String getAllChangeLog() {
    final old_log = file("old_logs.md")
    final header_file = file("header.md")

    def all_log = old_log.exists() ? old_log.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : "#Change Log"
    return header + System.lineSeparator() + all_log
}

String getLatestChangeLog() {
    final def log_file = file("changes.md")
    final def header_file = file("header.md")
    def log = log_file.exists() ? log_file.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : "#Change Log"
    return header + System.lineSeparator() + log
}

task makeChangeLog() {
    doLast {
        moveOldLog()
        // git commit and push to github

//        ProcessBuilder committer = new ProcessBuilder("git", "commit", "-m", "v${project.version}")
//        def process1 = committer.start()
//        process1.waitFor(10L, TimeUnit.SECONDS)
//        ProcessBuilder pusher = new ProcessBuilder("git", "push")
//        def process2 = pusher.start()
//        process2.waitFor(20L, TimeUnit.SECONDS)
    }
}

task checkMethod() {
    doLast {
        System.out.println("Is In CI ${Boolean.valueOf(System.getenv("GITHUB_ACTIONS"))}")
        System.out.println("FilePath ${jar.getArchiveFile().get()}")
        System.out.println("FilePath ${srcJar.getArchiveFile().get()}")
        System.out.println("FilePath ${deobfJar.getArchiveFile().get()}")
        System.out.println("Name $project.name")
        System.out.println("BaseName $archivesBaseName")
        System.out.println("ModVersion-fromProperty ${getProperty("modVersion")}")
        System.out.println("ModVersion-fromProject ${project.version}")
        println("*" * 20)
        println("changes.md")
        println(getLatestChangeLog())
        println("*" * 20)
        println("hasGitHubToken ${hasGitHubToken()}")
        println("hasSignToken ${project.hasProperty("keyStore")}")
        println("hasCurseForgeToken ${project.hasProperty("curseforge_additional-enchanted-miner_key")}")
        println("*" * 20)
        println("All Changes")
//        println(getAllChangeLog())
        println("*" * 20)
        println("FindProperty of githubToken: project.findProperty(\"githubToken\") != null ${project.findProperty("githubToken") != null}")
        println("FindProperty of gpr.user ${project.findProperty("gpr.user")}")
        println("Username ${project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: "NULL"}")
//        println("Property of gpr.user ${project.property("gpr.user")}") // FAILED
        println("*" * 20)
        println("Repository")
        getProject().getRepositories().stream().forEach { n -> println("${n.name} $n ${n instanceof MavenArtifactRepository ? n.getUrl() : "Not maven"}") }
        println("Dependency" + System.lineSeparator() + "*" * 20)
        getProject().getConfigurations().each { config ->
            println(config.getName())
            config.getAllDependencies().each { println(it) }
        }
    }
}

publishing {
    repositories {
        if (hasGitHubToken()) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/Kotori316/FluidTank")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                    password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
                }
            }
        } else {
            maven {
                name = "BuildDir"
                url = "$buildDir/repo"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifact srcJar {
                archiveClassifier.set('sources')
                extension = 'jar'
            }
            artifact deobfJar {
                archiveClassifier.set('deobf')
                extension = 'jar'
            }
            artifact reobfArtifact
//            publishing.publications {
//                target(MavenPublication) {
//                    pom.withXml {
//                        Node pomNode = asNode()
//                        pomNode.dependencies.'*'.findAll() {
//                            it.parent().remove(it)
//                        }
//                    }
//                }
//            }
        }
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}
