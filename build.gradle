import java.util.stream.Collectors

plugins {
    id "scala"
    id("maven-publish")
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id 'fabric-loom' version "0.10.50"
    // id 'maven-publish'
    //noinspection SpellCheckingInspection
    id "com.github.breadmoirai.github-release" version "2.2.12"
    //noinspection SpellCheckingInspection
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    runs {
        it.configure {
            client {
                runDir = Boolean.parseBoolean(System.getenv("FABRIC_SERVER") ?: "false") ? "run-server" : "run"
            }
            server {
                runDir = "run-server"
            }
        }
    }
}

repositories {
    maven {
        name = "BuildCraft"
        url = "https://alexiil.uk/maven/"
        content {
            //noinspection SpellCheckingInspection
            it.includeGroup("alexiil.mc.lib")
            //noinspection SpellCheckingInspection
            it.includeGroup("alexiil.mc.mod")
        }
    }
    maven {
        name = "TechReborn"
        url = "https://modmaven.dev/"
    }
    maven {
        name = "REI"
        url = "https://maven.shedaniel.me/"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    //noinspection SpellCheckingInspection
    modImplementation "net.fabricmc:fabric-language-scala:${project.fabric_scala_version}"

    // library
    implementation "org.scala-lang:scala-library:2.13.6"
    implementation "com.google.code.findbugs:jsr305:3.0.1"
    //noinspection SpellCheckingInspection
    modImplementation "alexiil.mc.lib:libblockattributes-all:${project.bc_attribute_version}"

    //noinspection SpellCheckingInspection
    modRuntimeOnly("alexiil.mc.mod:simplepipes-all:${project.simple_pipe_version}")
    //noinspection SpellCheckingInspection
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
    modImplementation("RebornCore:RebornCore-1.17:${project.RebornCore_version}")
    modRuntimeOnly("TechReborn:TechReborn-1.17:${project.TechReborn_version}")

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    // Test Dependencies.
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2')
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2')
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    // withSourcesJar()
//    toolchain {
//        it.languageVersion = JavaLanguageVersion.of(16)
//    }
}

jar {
    from "LICENSE"
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar
}

test {
    useJUnitPlatform()
}

// PUBLISH
def joinedLog = String.join("\n",
        "Fluid Tank for 1.17 and Fabric.",
        "",
        "Requires:",
        "",
        "* [Fabric Language Scala](https://www.curseforge.com/minecraft/mc-mods/fabric-language-scala)",
        "* [LibBlockAttributes](https://www.curseforge.com/minecraft/mc-mods/libblockattributes)",
        "",
        "See https://github.com/Kotori316/FluidTank/tree/1.17-fabric to get all change log."
)

githubRelease {
    repo.set('FluidTank')
    token = project.hasProperty("githubToken") ? getProperty("githubToken") : ""
    targetCommitish.set('1.17-fabric')

    body.set(joinedLog)
    releaseAssets = fileTree("build/libs")
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '411564'
        changelogType = 'markdown'
        addGameVersion 'Fabric'
        addGameVersion '1.17.1'
        addGameVersion '1.17'
        changelog = joinedLog
        releaseType = 'release'
        mainArtifact remapJar
        addArtifact jar
        relations {
            requiredDependency 'fabric-language-scala'
            //noinspection SpellCheckingInspection
            requiredDependency 'libblockattributes'
        }
    }
    options {
        curseGradleOptions.debug = false
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

task getCompileOptions() {
    doLast {
        List<String> strings = new ArrayList<>()
        strings.add("archivesBaseName: $archivesBaseName")
        strings.add("group: $group")
        strings.add("project.maven_group: ${project.maven_group}")
        strings.add("project.group: ${project.group}")
        strings.add("version: $version")
        strings.add("runs: ${minecraft.getRunConfigs().asMap.toMapString()}")
        strings.add("Absolute Client RunDir: ${project.projectDir.toPath().resolve(minecraft.getRunConfigs().getByName("client").runDir).toAbsolutePath()}")
        strings.add("Absolute Server RunDir: ${project.projectDir.toPath().resolve(minecraft.getRunConfigs().getByName("server").runDir).toAbsolutePath()}")
        strings.add("-" * 20)
        strings.add("Jar: ${jar.getArchiveFile().get()}")
        strings.add("Remap Jar ${remapJar.getArchiveFile().get()}")
        // strings.add("Source Jar ${sourcesJar.getArchiveFile().get()}")
        // strings.add("RemapSource Jar ${remapSourcesJar.getOutput()}")
        strings.add(String.valueOf(fileTree("build/libs").getFiles()))

        println(strings.stream().collect(Collectors.joining(System.lineSeparator())))
    }
}

publishing {
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = "FluidTank".toLowerCase()
            artifact remapJar
            artifact srcJar
        }
    }
}
